services:
  # SupportHub Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://supporthub:${DB_PASSWORD:-secure_password_123}@db:5432/supporthub
      - SESSION_SECRET=${SESSION_SECRET}
      - VERIFIED_SENDER_EMAIL=${VERIFIED_SENDER_EMAIL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TRUST_PROXY=1
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Internal)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=supporthub
      - POSTGRES_USER=supporthub
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    # DO NOT expose database port in production
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supporthub -d supporthub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx-compose.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  ssl_certs:
    driver: local

networks:
  default:
    driver: bridge